#!/bin/sh

#####################################################################
#       Author: Stephen Haffner < shaffner@oar.net >
#         Date: 2016-08-29
#  Description: Provides a quick restore function which propts for
#               the GELI password that wraps the ISCSI settings and
#               then preforms the restore
#####################################################################
# Copyright 2016 OARnet
#####################################################################

### BEGIN BORROWED CODE ###
####################################################################
# Set this to the location of pc-sysinstall
export PROGDIR="/root/pc-sysinstall"

# Set locatino of pc-sysinstall if not already set
if [ -z "${PROGDIR}" ]
then
  PROGDIR="/usr/share/pc-sysinstall"
  export PROGDIR
fi

# Set this to the components location
COMPDIR="${PROGDIR}/components"
export COMPDIR

# Set the configureation dir
CONFDIR="/server-build/conf/ME"
export CONFDIR

# Set this to the packages location
PKGDIR="${CONFDIR}"
export PKGDIR

# End of user-editable configuration
#####################################################################

# Set our QUERYDIR
QUERYDIR="${PROGDIR}/backend-query"
export QUERYDIR

# Set our BACKEND
BACKEND="${PROGDIR}/backend"
export BACKEND

PARTMANAGERDIR="${PROGDIR}/backend-partmanager"
export PARTMANAGERDIR

# Start by sourcing our conf file
export CFGF="${CONFDIR}/pc-sysinstall.conf"
export CFG=/root/pc-sysinstall/conf/pc-sysinstall.conf
if [ -e "${CFG}" ]
then
  . ${CFG}
else
  echo "ERROR: Could not find ${CFG}"
  exit 1
fi

# Now source our functions.sh
if [ -e "${PROGDIR}/backend/functions.sh" ]
then
  . ${PROGDIR}/backend/functions.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions.sh"
  exit 1
fi
# Now source our functions-networking.sh
if [ -e "${PROGDIR}/backend/functions-networking.sh" ]
then
  . ${PROGDIR}/backend/functions-networking.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions-networking.sh"
  exit 1
fi
# Now source our functions-disk.sh
if [ -e "${PROGDIR}/backend/functions-disk.sh" ]
then
  . ${PROGDIR}/backend/functions-disk.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions-disk.sh"
  exit 1
fi
# Now source our functions-zfsrestore.sh
if [ -e "${PROGDIR}/backend/functions-zfsrestore.sh" ]
then
  . ${PROGDIR}/backend/functions-zfsrestore.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions-zfsrestore.sh"
  exit 1
fi
if [ -e "${PROGDIR}/backend/functions-newfs.sh" ]
then
  . ${PROGDIR}/backend/functions-newfs.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions-newfs.sh"
  exit 1
fi
if [ -e "${PROGDIR}/backend/functions-bsdlabel.sh" ]
then
  . ${PROGDIR}/backend/functions-bsdlabel.sh
else
  echo "ERROR: Could not find ${PROGDIR}/backend/functions-bsdlabel.sh"
  exit 1
fi

if [ -z "${1}" ]
then
  # Display the help index
  echo "Usage: iscsi-restore <GELI ISCSI FILE> [--mount-only]"
else

  T_ISCSIFILE=${1}
  T_ISCSIFILE=`realpath ${T_ISCSIFILE}`

  # Prompt user for GELI password here!
  if [ "${2}" != "--only-mount" ]; then
    echo "WARNING: Once you enter the password local zpools will be destroyed and disks will be wiped!!!"
  else
    echo "INFO: Running in only mount mode!"
  fi

  # Print md5 of file so we know if we have the proper file on the usb.
  md5 $T_ISCSIFILE

  stty -echo
  read -p "Enter the password for the GELI device: " T_ISCSIPASS
  stty echo

  ## Do things manually instead of calling parseconfig.sh
  # Resolve any relative pathing
  export LOGOUT="/tmp/restore.log"
  CFGF="`realpath ${CFGF}`"
  export CFGF

  # Figure out if UEFI or BIOS
  BOOTMODE=`sysctl -n machdep.bootmethod`
  export BOOTMODE

  # Check if booted via GRUB and set BOOTMODE correctly (For GhostBSD and friends)
  if [ -n "`kenv grub.platform 2>/dev/null`" -a "`kenv grub.platform 2>/dev/null`" = "efi" ] ; then
    BOOTMODE="UEFI"
  fi

  # See if the user wants a custom zpool starting name
  get_value_from_cfg zpoolName
  if [ -n "$VAL" ] ; then
    export ZPOOLCUSTOMNAME="${VAL}"
  fi

  # Check if we are going to force ZFS 4k sectors
  get_value_from_cfg zfsForce4k
  if [ -n "$VAL" ] ; then
    export ZFSFORCE4K="${VAL}"
  fi

  if [ "${2}" != "--only-mount" ]; then
    # Import and destroy an exsisting zpool
    echo "Attempting to import and destroy zpools called ${ZPOOLCUSTOMNAME}"
    zpool import ${ZPOOLCUSTOMNAME} > /dev/null 2>&1
    zpool destroy ${ZPOOLCUSTOMNAME} > /dev/null 2>&1
    zpool import -NfFn ${ZPOOLCUSTOMNAME} > /dev/null 2>&1
    zpool destroy ${ZPOOLCUSTOMNAME} > /dev/null 2>&1
    zpool destroy ${ZPOOLCUSTOMNAME}1 > /dev/null 2>&1
    zpool destroy ${ZPOOLCUSTOMNAME}2 > /dev/null 2>&1
  fi

  # Start iscsid
  echo "Starting iscsid for iscsi restore"
  service iscsid onestart

  # Set up the networking for stunnel and iscsid to use
  mkdir -p /tmp/bsdinstall_etc
  touch /tmp/bsdinstall_etc/resolv.conf
  start_networking
  sleep 2

  if [ "${2}" != "--only-mount" ]; then
    # Lets start setting up the disk slices now
    setup_disk_slice

    ## Disk setup complete, now lets parse WORKINGSLICES and setup the bsdlabels
    setup_disk_label

    ## Now we've setup the bsdlabels, lets go ahead and run newfs / zfs
    ## to setup the filesystems
    setup_filesystems

    # We are ready to begin the restore process
  fi

  # This takes the place of the load_iscsi_settings function in functions-zfsrestore.sh
  export ISCSIFILE=$T_ISCSIFILE
  echo $ISCSIFILE
  progname=`basename $0`
  ISCSIPASS=`mktemp -q /tmp/${progname}.XXXXXX`
  if [ $? -ne 0 ]; then
    echo "$0: Can't create temp file for writing password, exiting..."
    exit 1
  fi
  echo $T_ISCSIPASS > $ISCSIPASS
  export ISCSIPASS
  # The temporary file in ISCSIPASS is deleted within load_zpool_from_iscsi_file

  load_zpool_from_iscsi_file


  if [ "${2}" != "--only-mount" ]; then
    restore_zfs_from_local
    echo_log "Installation finished!"
  else
    echo_log "Volume mounted!"
  fi
  exit 0
fi

